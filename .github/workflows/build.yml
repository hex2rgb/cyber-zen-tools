name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        goarch: [amd64, arm64]
        exclude:
          - os: macos-latest
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build
        env:
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.version.outputs.version }}
          COMMIT_HASH: ${{ github.sha }}
          BUILD_TIME: ${{ github.event.head_commit.timestamp }}
        run: |
          LDFLAGS="-X main.Version=${VERSION} -X main.CommitHash=${COMMIT_HASH} -X main.BuildTime=${BUILD_TIME}"
          go build -ldflags "$LDFLAGS" -o build/cyber-zen-${{ env.GOOS }}-${{ env.GOARCH }} ./cmd
          chmod +x build/cyber-zen-${{ env.GOOS }}-${{ env.GOARCH }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cyber-zen-${{ matrix.os }}-${{ matrix.goarch }}
          path: build/cyber-zen-${{ env.GOOS }}-${{ env.GOARCH }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release assets
        run: |
          mkdir -p release
          for file in cyber-zen-*; do
            # 重命名文件，添加版本信息
            VERSION="${{ github.event.release.tag_name }}"
                          OS_ARCH=$(echo $file | sed 's/cyber-zen-//')
              NEW_NAME="cyber-zen-${VERSION}-${OS_ARCH}"
            cp $file $NEW_NAME
            chmod +x $NEW_NAME
            
            # 创建压缩包
            tar -czf release/${NEW_NAME}.tar.gz $NEW_NAME
            
            # 创建安装脚本
            cat > release/install-${OS_ARCH}.sh << 'EOF'
          #!/bin/bash
          # Cyben Zen Tools 安装脚本
          # 自动下载并安装最新版本
          
          set -e
          
          # 颜色定义
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          # 变量定义
          BINARY_NAME="cyber-zen"
          INSTALL_DIR="/usr/local/bin"
          VERSION="${{ github.event.release.tag_name }}"
          OS_ARCH="$OS_ARCH"
          
          # 打印带颜色的消息
          print_info() {
              echo -e "${BLUE}[INFO]${NC} $1"
          }
          
          print_success() {
              echo -e "${GREEN}[SUCCESS]${NC} $1"
          }
          
          print_warning() {
              echo -e "${YELLOW}[WARNING]${NC} $1"
          }
          
          print_error() {
              echo -e "${RED}[ERROR]${NC} $1"
          }
          
          # 检测系统架构
          detect_arch() {
              case "$(uname -m)" in
                  x86_64) echo "amd64" ;;
                  arm64|aarch64) echo "arm64" ;;
                  *) echo "amd64" ;;
              esac
          }
          
          # 检测操作系统
          detect_os() {
              case "$(uname -s)" in
                  Darwin*) echo "darwin" ;;
                  Linux*) echo "linux" ;;
                  *) echo "linux" ;;
              esac
          }
          
          # 下载程序
          download_program() {
              local os=$(detect_os)
              local arch=$(detect_arch)
              local download_url="https://github.com/${{ github.repository }}/releases/download/${VERSION}/cyber-zen-${VERSION}-${os}-${arch}.tar.gz"
              
              print_info "下载程序: $download_url"
              
              # 创建临时目录
              local temp_dir=$(mktemp -d)
              cd "$temp_dir"
              
              # 下载并解压
              curl -L -o cyber-zen.tar.gz "$download_url"
              tar -xzf cyber-zen.tar.gz
              
              # 安装程序
              if [ ! -w "$INSTALL_DIR" ]; then
                  print_warning "需要 sudo 权限安装到 $INSTALL_DIR"
                  sudo cp cyben-zen-* "$INSTALL_DIR/$BINARY_NAME"
                  sudo chmod +x "$INSTALL_DIR/$BINARY_NAME"
              else
                  cp cyben-zen-* "$INSTALL_DIR/$BINARY_NAME"
                  chmod +x "$INSTALL_DIR/$BINARY_NAME"
              fi
              
              # 清理临时文件
              cd - > /dev/null
              rm -rf "$temp_dir"
              
              print_success "安装完成: $INSTALL_DIR/$BINARY_NAME"
          }
          
          # 验证安装
          verify_installation() {
              if command -v "$BINARY_NAME" &> /dev/null; then
                  print_success "✓ $BINARY_NAME 已安装"
                  "$BINARY_NAME" --version
              else
                  print_error "✗ $BINARY_NAME 未找到"
                  exit 1
              fi
          }
          
          # 主函数
          main() {
              print_info "开始安装 Cyber Zen Tools v${VERSION}..."
              download_program
              verify_installation
              print_success "🎉 安装完成！"
          }
          
          # 运行主函数
          main "$@"
          EOF
          
          chmod +x release/install-${OS_ARCH}.sh
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            your-repo/cyber-zen-tools:latest
            your-repo/cyber-zen-tools:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 