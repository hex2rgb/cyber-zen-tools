name: Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build for multiple platforms
      run: |
        mkdir -p dist
        
        # Build for different platforms
        for os in darwin linux; do
          for arch in amd64 arm64; do
            echo "Building for $os/$arch..."
            GOOS=$os GOARCH=$arch go build \
              -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.CommitHash=$(git rev-parse --short HEAD) -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" \
              -o "dist/cyber-zen-$os-$arch" ./cmd
            chmod +x "dist/cyber-zen-$os-$arch"
          done
        done

    - name: Create release assets
      run: |
        cd dist
        for file in *; do
          tar -czf "${file}.tar.gz" "$file"
          zip "${file}.zip" "$file"
        done
        cd ..

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Cyber Zen Tools ${{ steps.version.outputs.version }}
          
          ### 下载
          - [cyber-zen-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/cyber-zen-darwin-amd64.tar.gz) - macOS Intel
          - [cyber-zen-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/cyber-zen-darwin-arm64.tar.gz) - macOS Apple Silicon
          - [cyber-zen-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/cyber-zen-linux-amd64.tar.gz) - Linux AMD64
          - [cyber-zen-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/cyber-zen-linux-arm64.tar.gz) - Linux ARM64
          
          ### 安装
          ```bash
          # 下载并安装
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | bash -s -- --version ${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets - macOS Intel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cyber-zen-darwin-amd64.tar.gz
        asset_name: cyber-zen-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets - macOS Apple Silicon
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cyber-zen-darwin-arm64.tar.gz
        asset_name: cyber-zen-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets - Linux AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cyber-zen-linux-amd64.tar.gz
        asset_name: cyber-zen-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets - Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cyber-zen-linux-arm64.tar.gz
        asset_name: cyber-zen-linux-arm64.tar.gz
        asset_content_type: application/gzip 